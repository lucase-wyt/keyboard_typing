const javascriptWords = {
  name: 'Jaqvascript',
  description: '常用的Jaqvascript关键词和术语',
  level: 'beginner',
  type: 'words',
  isBuiltin: true,
  words: [
    {
      key: 'Array',
      name: '数组',
      desc: '用于在单个变量中存储多个值的有序集合',
    },
    { key: 'length', name: '长度', desc: '返回数组中元素的数量' },
    { key: 'Array.isArray()', name: '是否数组', desc: '判断对象是否为数组' },
    {
      key: 'Array.from()',
      name: '从类数组创建',
      desc: '将类数组或可迭代对象转换为数组',
    },
    { key: 'Array.of()', name: '创建数组', desc: '从一组参数创建一个新数组' },
    { key: 'new Array()', name: '新建数组', desc: '创建一个新的数组实例' },
    {
      key: 'Array.prototype',
      name: '数组原型',
      desc: '所有数组实例共享的属性和方法',
    },
    { key: 'Array.isArray()', name: '是否数组', desc: '判断对象是否为数组' },
    {
      key: 'Array.from()',
      name: '从类数组创建',
      desc: '将类数组或可迭代对象转换为数组',
    },
    { key: 'Array.of()', name: '创建数组', desc: '从一组参数创建一个新数组' },

    { key: 'push()', name: '推入', desc: '向数组末尾添加一个或多个元素' },
    { key: 'pop()', name: '弹出', desc: '删除并返回数组的最后一个元素' },
    { key: 'shift()', name: '移除首元素', desc: '删除并返回数组的第一个元素' },
    {
      key: 'unshift()',
      name: '插入首元素',
      desc: '向数组开头添加一个或多个元素',
    },
    { key: 'concat()', name: '合并', desc: '合并两个或多个数组，返回新数组' },
    { key: 'join()', name: '连接', desc: '将数组所有元素连接成字符串' },
    { key: 'slice()', name: '切片', desc: '返回数组的选定部分（浅拷贝）' },
    { key: 'splice()', name: '拼接', desc: '从数组中添加/删除元素' },
    { key: 'indexOf()', name: '查找索引', desc: '返回元素首次出现的索引' },
    {
      key: 'lastIndexOf()',
      name: '末次索引',
      desc: '返回元素最后一次出现的索引',
    },
    { key: 'forEach()', name: '遍历', desc: '对每个数组元素执行函数' },
    { key: 'map()', name: '映射', desc: '创建新数组，包含原数组处理后的结果' },
    { key: 'filter()', name: '过滤', desc: '创建包含通过测试的元素的新数组' },
    { key: 'reduce()', name: '累计', desc: '对数组元素执行累计计算' },
    { key: 'sort()', name: '排序', desc: '对数组元素进行排序（原地修改）' },
    { key: 'reverse()', name: '反转', desc: '反转数组中元素的顺序' },
    { key: 'isArray()', name: '是否数组', desc: '判断对象是否为数组' },
    { key: 'find()', name: '查找元素', desc: '返回满足条件的第一个元素' },
    {
      key: 'findIndex()',
      name: '查找索引',
      desc: '返回满足条件的第一个元素的索引',
    },
    { key: 'includes()', name: '包含', desc: '判断数组是否包含某值' },
    {
      key: 'every()',
      name: '全部满足',
      desc: '测试数组中所有元素是否满足条件',
    },
    { key: 'some()', name: '部分满足', desc: '测试数组中是否有元素满足条件' },
    { key: 'fill()', name: '填充', desc: '用静态值填充数组的全部或部分' },
    {
      key: 'copyWithin()',
      name: '复制覆盖',
      desc: '在数组内部复制元素到另一个位置',
    },
    { key: 'flat()', name: '扁平化', desc: '将多维数组转换为一维数组' },
    { key: 'flatMap()', name: '扁平映射', desc: '先映射再扁平化数组' },

    { key: 'Function', name: '函数', desc: 'JavaScript中的可执行代码块' },
    { key: 'function', name: '函数声明', desc: '定义一个新的函数' },
    { key: 'return', name: '返回值', desc: '从函数中返回一个值' },
    { key: 'arguments', name: '参数对象', desc: '包含传递给函数的参数' },
    { key: 'this', name: '上下文对象', desc: '指向当前函数执行的上下文对象' },
    { key: 'call()', name: '调用函数', desc: '以指定的this值调用函数' },
    {
      key: 'apply()',
      name: '应用函数',
      desc: '以指定的this值和参数数组调用函数',
    },
    { key: 'bind()', name: '绑定函数', desc: '创建一个新函数，绑定this和参数' },

    {
      key: 'Object',
      name: '对象',
      desc: 'JavaScript中的基本数据结构，用于存储键值对',
    },
    {
      key: 'Object.keys()',
      name: '键列表',
      desc: '返回对象的所有可枚举属性名',
    },
    {
      key: 'Object.values()',
      name: '值列表',
      desc: '返回对象的所有可枚举属性值',
    },
    {
      key: 'Object.entries()',
      name: '键值对列表',
      desc: '返回对象的键值对数组',
    },
    {
      key: 'Object.assign()',
      name: '对象合并',
      desc: '将源对象的属性复制到目标对象 Object.assign(target, ...sources)',
    },
    {
      key: 'Object.freeze()',
      name: '冻结对象',
      desc: '防止对象被修改（不可变）',
    },
    {
      key: 'Object.seal()',
      name: '密封对象',
      desc: '防止添加新属性，但允许修改现有属性',
    },
    {
      key: 'Object.create()',
      name: '创建新对象',
      desc: '使用指定原型创建新对象',
    },
    {
      key: 'Object.is()',
      name: '严格相等',
      desc: '判断两个值是否严格相等（包括NaN）Object.is(value1, value2)',
    },
    {
      key: 'Object.setPrototypeOf()',
      name: '设置原型',
      desc: '设置对象的原型链 Object.setPrototypeOf(obj, prototype)',
    },
    {
      key: 'Object.getPrototypeOf()',
      name: '获取原型',
      desc: '返回对象的原型链上的第一个对象 Object.getPrototypeOf(obj)',
    },
    {
      key: 'Object.getOwnPropertySymbols()',
      name: '获取符号属性',
      desc: '返回对象自身的所有符号属性 Object.getOwnPropertySymbols(obj)',
    },

    { key: 'String', name: '字符串', desc: '表示文本数据的基本数据类型' },
    { key: 'charAt()', name: '字符位置', desc: '返回指定位置的字符' },
    {
      key: 'charCodeAt()',
      name: '字符编码',
      desc: '返回指定位置字符的Unicode编码',
    },
    { key: 'concat()', name: '连接', desc: '连接两个或多个字符串' },
    { key: 'indexOf()', name: '查找索引', desc: '返回子字符串首次出现的索引' },
    {
      key: 'lastIndexOf()',
      name: '末次索引',
      desc: '返回子字符串最后一次出现的索引',
    },
    { key: 'match()', name: '匹配', desc: '检索与正则表达式匹配的结果' },
    { key: 'replace()', name: '替换', desc: '替换与正则匹配的子字符串' },
    { key: 'search()', name: '搜索', desc: '返回正则匹配的第一个位置' },
    { key: 'slice()', name: '切片', desc: '提取字符串的选定部分' },
    { key: 'split()', name: '分割', desc: '将字符串分割为数组' },
    {
      key: 'substr()',
      name: '子字符串',
      desc: '从指定位置提取指定长度的子字符串',
    },
    { key: 'substring()', name: '子字符串', desc: '提取两个索引间的子字符串' },
    { key: 'toLowerCase()', name: '转小写', desc: '将字符串转为小写' },
    { key: 'toUpperCase()', name: '转大写', desc: '将字符串转为大写' },
    { key: 'trim()', name: '修剪', desc: '去除字符串两端空白' },
    {
      key: 'startsWith()',
      name: '起始判断',
      desc: '判断字符串是否以指定子串开头',
    },
    {
      key: 'endsWith()',
      name: '结束判断',
      desc: '判断字符串是否以指定子串结尾',
    },
    { key: 'includes()', name: '包含', desc: '判断字符串是否包含某子串' },
    { key: 'repeat()', name: '重复', desc: '返回指定次数重复的字符串' },
    { key: 'padStart()', name: '填充开始', desc: '在字符串开头填充指定字符' },
    { key: 'padEnd()', name: '填充结束', desc: '在字符串结尾填充指定字符' },

    { key: 'Math', name: '数学对象', desc: '提供数学运算的属性和方法' },
    { key: 'Math.PI', name: '圆周率', desc: '圆周率π的值（约3.14159）' },
    { key: 'Math.abs()', name: '绝对值', desc: '返回数字的绝对值' },
    { key: 'Math.ceil()', name: '向上取整', desc: '向上舍入到最接近的整数' },
    { key: 'Math.floor()', name: '向下取整', desc: '向下舍入到最接近的整数' },
    { key: 'Math.round()', name: '四舍五入', desc: '四舍五入到最接近的整数' },
    { key: 'Math.max()', name: '最大值', desc: '返回一组数中的最大值' },
    { key: 'Math.min()', name: '最小值', desc: '返回一组数中的最小值' },
    { key: 'Math.pow()', name: '幂运算', desc: '返回基数的指数次幂' },
    { key: 'Math.sqrt()', name: '平方根', desc: '返回数字的平方根' },
    { key: 'Math.random()', name: '随机数', desc: '返回0到1之间的随机数' },
    { key: 'Math.sin()', name: '正弦', desc: '返回角度的正弦值' },
    { key: 'Math.cos()', name: '余弦', desc: '返回角度的余弦值' },
    { key: 'Math.tan()', name: '正切', desc: '返回角度的正切值' },
    { key: 'Math.log()', name: '对数', desc: '返回数字的自然对数' },
    { key: 'Math.exp()', name: '指数', desc: '返回e的指定次幂' },
    { key: 'Math.trunc()', name: '截取整数', desc: '移除小数部分返回整数部分' },
    { key: 'Math.sign()', name: '符号', desc: '返回数字的符号（正/负/零）' },
    { key: 'Math.cbrt()', name: '立方根', desc: '返回数字的立方根' },
    {
      key: 'Math.hypot()',
      name: '欧几里得距离',
      desc: '返回所有参数的平方和的平方根',
    },
    { key: 'Math.imul()', name: '整数乘法', desc: '返回两个32位整数的乘积' },
    {
      key: 'Math.log2()',
      name: '以2为底的对数',
      desc: '返回数字的以2为底的对数',
    },

    { key: 'Date', name: '日期对象', desc: '用于处理日期和时间的对象' },
    { key: 'new Date()', name: '创建日期', desc: '创建一个新的日期对象' },
    { key: 'getFullYear()', name: '获取年份', desc: '返回日期对象的完整年份' },
    { key: 'getMonth()', name: '获取月份', desc: '返回日期对象的月份（0-11）' },
    { key: 'getDate()', name: '获取日期', desc: '返回日期对象的日（1-31）' },
    { key: 'getDay()', name: '获取星期', desc: '返回日期对象的星期（0-6）' },
    { key: 'getHours()', name: '获取小时', desc: '返回日期对象的小时（0-23）' },
    {
      key: 'getMinutes()',
      name: '获取分钟',
      desc: '返回日期对象的分钟（0-59）',
    },
    {
      key: 'getSeconds()',
      name: '获取秒钟',
      desc: '返回日期对象的秒钟（0-59）',
    },
    {
      key: 'getMilliseconds()',
      name: '获取毫秒',
      desc: '返回日期对象的毫秒（0-999）',
    },
    {
      key: 'getTime()',
      name: '获取时间戳',
      desc: '返回自1970年1月1日以来的毫秒数',
    },
    { key: 'setFullYear()', name: '设置年份', desc: '设置日期对象的完整年份' },
    { key: 'setMonth()', name: '设置月份', desc: '设置日期对象的月份（0-11）' },
    { key: 'setDate()', name: '设置日期', desc: '设置日期对象的日（1-31）' },
    {
      key: 'setHours()',
      name: '设置小时',
      desc: '设置日期  对象的小时（0-23）',
    },
    {
      key: 'setMinutes()',
      name: '设置分钟',
      desc: '设置日期对象的分钟（0-59）',
    },
    {
      key: 'setSeconds()',
      name: '设置秒钟',
      desc: '设置日期对象的秒钟（0-59）',
    },
    {
      key: 'setMilliseconds()',
      name: '设置毫秒',
      desc: '设置   日期对象的毫秒（0-999）',
    },
    {
      key: 'toISOString()',
      name: 'ISO格式',
      desc: '将日期对象转换为ISO字符串',
    },
    {
      key: 'toDateString()',
      name: '日期字符串',
      desc: '返回    日期对象的日期部分字符串',
    },
    {
      key: 'toTimeString()',
      name: '时间字符串',
      desc: '返回日期对象的时间部分字符串',
    },
    {
      key: 'toLocaleDateString()',
      name: '本地日期字符串',
      desc: '返回本地化的日期字符串',
    },
    {
      key: 'toLocaleTimeString()',
      name: '本地时间字符串',
      desc: '返回本地化的时间字符串',
    },
    {
      key: 'toLocaleString()',
      name: '本地字符串',
      desc: '返回本地化的日期和时间字符串',
    },
    {
      key: 'toUTCString()',
      name: 'UTC字符串',
      desc: '返回日期对象的UTC字符串',
    },
    {
      key: 'toGMTString()',
      name: 'GMT字符串',
      desc: '返回  日期对象的GMT字符串',
    },
    { key: 'toJSON()', name: 'JSON格式', desc: '将日期对象转换为JSON字符串' },
    { key: 'now()', name: '当前时间戳', desc: '返回当前时间的时间戳（毫秒）' },
    { key: 'parse()', name: '解析日期', desc: '将字符串解析为时间戳' },
    { key: 'UTC()', name: 'UTC时间', desc: '返回指定日期的UTC时间戳' },
    { key: 'setTime()', name: '设置时间戳', desc: '设置日期对象的时间戳' },
    {
      key: 'getTimezoneOffset()',
      name: '时区偏移',
      desc: '返回当前时区与UTC的分钟差',
    },
    { key: 'JSON', name: 'JSON对象', desc: '用于处理JSON数据的对象' },
    {
      key: 'JSON.stringify()',
      name: '序列化',
      desc: '将JavaScript对象转换为JSON字符串',
    },
    {
      key: 'JSON.parse()',
      name: '反序列化',
      desc: '将JSON字符串转换为JavaScript对象',
    },

    {
      key: 'Promise',
      name: 'Promise对象',
      desc: '表示异步操作的最终完成或失败',
    },
    {
      key: 'new Promise()',
      name: '创建Promise',
      desc: '创建一个新的Promise实例',
    },
    { key: 'then()', name: '链式调用', desc: '在Promise成功时执行的回调函数' },
    { key: 'catch()', name: '错误处理', desc: '在Promise失败时执行的回调函数' },
    {
      key: 'finally()',
      name: '最终处理',
      desc: '无论成功或失败都会执行的回调函数',
    },
    { key: 'async', name: '异步函数', desc: '声明一个异步函数' },
    { key: 'await', name: '等待', desc: '等待一个Promise完成' },
    {
      key: 'Promise.all()',
      name: '全部完成',
      desc: '等待所有Promise完成，返回结果数组',
    },
    {
      key: 'Promise.race()',
      name: '竞速',
      desc: '返回第一个完成的Promise',
    },
    {
      key: 'Promise.resolve()',
      name: '解析',
      desc: '将值包装成一个已解决的Promise',
    },
    {
      key: 'Promise.reject()',
      name: '拒绝',
      desc: '将值包装成一个已拒绝的Promise',
    },
    { key: 'console.log()', name: '日志输出', desc: '在控制台输出信息' },
    { key: 'console.error()', name: '错误输出', desc: '在控制台输出错误信息' },
    { key: 'console.warn()', name: '警告输出', desc: '在控制台输出警告信息' },
    { key: 'console.info()', name: '信息输出', desc: '在控制台输出一般信息' },
    { key: 'console.debug()', name: '调试输出', desc: '在控制台输出调试信息' },
    { key: 'console.table()', name: '表格输出', desc: '以表格形式输出数据' },
    {
      key: 'console.group()',
      name: '分组输出',
      desc: '开始一个新的控制台分组',
    },
    { key: 'console.groupEnd()', name: '结束分组', desc: '结束当前控制台分组' },
    { key: 'console.time()', name: '计时开始', desc: '开始计时' },
    { key: 'console.timeEnd()', name: '计时结束', desc: '结束计时并输出耗时' },

    {
      key: 'window',
      name: '全局对象',
      desc: '浏览器环境中的全局对象，表示浏览器窗口',
    },
    { key: 'document', name: '文档对象', desc: '表示当前网页的DOM文档' },
    {
      key: 'navigator',
      name: '浏览器信息',
      desc: '提供有关浏览器的信息和功能',
    },
    { key: 'location', name: '位置对象', desc: '表示当前文档的URL和相关信息' },
    { key: 'history', name: '历史对象', desc: '提供浏览器会话历史记录的访问' },
    {
      key: 'localStorage',
      name: '本地存储',
      desc: '用于在浏览器中存储数据的对象',
    },
    {
      key: 'sessionStorage',
      name: '会话存储',
      desc: '用于在浏览器会话中存储数据的对象',
    },
    { key: 'fetch()', name: '网络请求', desc: '用于发起网络请求并处理响应' },
    {
      key: 'XMLHttpRequest',
      name: '旧版网络请求',
      desc: '用于发起HTTP请求的旧版API',
    },
    { key: 'setTimeout()', name: '定时器', desc: '设置延迟执行的函数' },
    { key: 'clearTimeout()', name: '清除定时器', desc: '取消之前设置的定时器' },
    { key: 'setInterval()', name: '间隔执行', desc: '设置周期性执行的函数' },
    {
      key: 'clearInterval()',
      name: '清除间隔',
      desc: '取消之前设置的间隔执行',
    },
    {
      key: 'addEventListener()',
      name: '事件监听',
      desc: '为指定事件添加监听器',
    },
    {
      key: 'removeEventListener()',
      name: '移除监听',
      desc: '移除指定事件的监听器',
    },
    {
      key: 'JSON.stringify()',
      name: '序列化',
      desc: '将JavaScript对象转换为JSON字符串',
    },
    {
      key: 'JSON.parse()',
      name: '反序列化',
      desc: '将JSON字符串转换为JavaScript对象',
    },
    { key: 'import()', name: '动态导入', desc: '动态加载模块并返回Promise' },
    { key: 'export', name: '导出', desc: '将模块的功能导出供其他模块使用' },
    { key: 'default', name: '默认导出', desc: '指定模块的默认导出' },
    { key: 'module', name: '模块对象', desc: '表示当前模块的相关信息' },
    { key: 'require()', name: '模块加载', desc: '用于加载CommonJS模块的函数' },
    {
      key: 'globalThis',
      name: '全局对象',
      desc: '在所有环境中访问全局对象的标准方式',
    },
    { key: 'Symbol', name: '符号', desc: '创建唯一且不可变的值' },
    {
      key: 'Symbol.for()',
      name: '全局符号',
      desc: '在全局符号注册表中查找或创建符号',
    },
    { key: 'Symbol.keys()', name: '符号键', desc: '返回对象的所有符号键' },
    {
      key: 'Symbol.iterator',
      name: '迭代器符号',
      desc: '用于定义对象的默认迭代行为',
    },
    {
      key: 'Symbol.asyncIterator',
      name: '异步迭代器符号',
      desc: '用于定义异步迭代行为',
    },
    {
      key: 'Symbol.toStringTag',
      name: '字符串标签符号',
      desc: '用于自定义对象的toString输出',
    },
    {
      key: 'Symbol.hasInstance',
      name: '实例检查符号',
      desc: '用于自定义instanceof操作符的行为',
    },
    {
      key: 'Symbol.toPrimitive',
      name: '原始值符号',
      desc: '用于自定义对象的原始值转换',
    },
    {
      key: 'Symbol.match',
      name: '匹配符号',
      desc: '用于自定义正则表达式的匹配行为',
    },
    {
      key: 'Symbol.replace',
      name: '替换符号',
      desc: '用于自定义字符串替换行为',
    },
    {
      key: 'Symbol.search',
      name: '搜索符号',
      desc: '用于自定义字符串搜索行为',
    },
    {
      key: 'Symbol.split',
      name: '分割符号',
      desc: '    用于自定义字符串分割行为',
    },
    {
      key: 'Symbol.unscopables',
      name: '不可见符号',
      desc: '用于定义哪些属性不应被with语句捕获',
    },
    { key: 'Symbol.metadata', name: '元数据符号', desc: '   用于存储元数据' },
    {
      key: 'Symbol.observable',
      name: '可观察符号',
      desc: '用于定义可观察对象的行为',
    },
    { key: 'Symbol.dispose', name: '释放符号', desc: '用于定义资源释放的行为' },
    {
      key: 'Symbol.asyncDispose',
      name: '异步释放符号',
      desc: '用于定义异步资源释放的行为',
    },
    {
      key: 'Symbol.patternMatch',
      name: '模式匹配符号',
      desc: '用于自定义模式匹配行为',
    },
    {
      key: 'Symbol.species',
      name: '物种符号',
      desc: '用于定义构造函数的默认实例',
    },
    {
      key: 'Symbol.toString',
      name: '字符串转换符号',
      desc: '用于自定义对象的字符串转换',
    },
    {
      key: 'Symbol.toJSON',
      name: 'JSON转换符号',
      desc: '用于自定义对象的JSON转换',
    },
    {
      key: 'Symbol.toLocaleString',
      name: '本地化字符串符号',
      desc: '用于自定义对象的本地化字符串输出',
    },
    {
      key: 'Symbol.toPrimitive',
      name: '原始值符号',
      desc: '用于自定义对象的原始值转换',
    },
    {
      key: 'Symbol.isConcatSpreadable',
      name: '连接展开符号',
      desc: '用于定义对象在concat操作中的展开行为',
    },
    {
      key: 'Symbol.matchAll',
      name: '全匹配符号',
      desc: '用于自定义正则表达式的全匹配行为',
    },
    { key: 'Symbol.metadata', name: '元数据符号', desc: '用于存储元数据' },
    {
      key: 'Symbol.observable',
      name: '可观察符号',
      desc: '用于定义可观察对象的行为',
    },
    { key: 'Symbol.dispose', name: '释放符号', desc: '用于定义资源释放的行为' },
    {
      key: 'Symbol.asyncDispose',
      name: '异步释放符号',
      desc: '用于定义异步资源释放的行为',
    },
    {
      key: 'Symbol.patternMatch',
      name: '模式匹配符号',
      desc: '用于自定义模式匹配行为',
    },
    {
      key: 'Symbol.species',
      name: '物种符号',
      desc: '用于定义构造函数的默认实例',
    },
    {
      key: 'Symbol.toString',
      name: '字符串转换符号',
      desc: '用于自定义对象的字符串转换',
    },
    {
      key: 'Symbol.toJSON',
      name: 'JSON转换符号',
      desc: '用于自定义对象的JSON转换',
    },
    {
      key: 'Symbol.toLocaleString',
      name: '本地化字符串符号 ',
      desc: '用于自定义对象的本地化字符串输出',
    },
    {
      key: 'Symbol.toPrimitive',
      name: '原始值符号',
      desc: '用于自定义对象的原始值转换',
    },
    {
      key: 'Symbol.isConcatSpreadable',
      name: '连接展开符号',
      desc: '用于定义对象在concat操作中的展开行为',
    },
    {
      key: 'Symbol.matchAll',
      name: '全匹配符号',
      desc: '用于自定义正则表达式的全匹配行为',
    },
    { key: 'Symbol.metadata', name: '元数据符号', desc: '用于存储元数据' },
    {
      key: 'Symbol.observable',
      name: '可观察符号',
      desc: ' 用于定义可观察对象的行为',
    },
    { key: 'Symbol.dispose', name: '释放符号', desc: '用于定义资源释放的行为' },
    {
      key: 'Symbol.asyncDispose',
      name: '异步释放符号',
      desc: '用于定义异步资源释放的行为',
    },
    {
      key: 'Symbol.patternMatch',
      name: '模式匹配符号',
      desc: '用于自定义模式匹配行为',
    },
    {
      key: 'Symbol.species',
      name: '物种符号',
      desc: '用于定义构造函数的默认实例',
    },
    {
      key: 'Symbol.toString',
      name: '字符串转换符号',
      desc: '用于自定义对象的字符串转换',
    },
    {
      key: 'Number',
      name: '数字对象',
      desc: 'JavaScript中的数字类型，表示整数或浮点数',
    },
    {
      key: 'Number.isNaN()',
      name: '是否NaN',
      desc: '判断值是否为NaN（非数字）',
    },
    { key: 'Number.isFinite()', name: '是否有限', desc: '判断值是否为有限数' },
    { key: 'Number.isInteger()', name: '是否整数', desc: '判断值是否为整数' },
    {
      key: 'Number.isSafeInteger()',
      name: '是否安全整数',
      desc: '判断值是否为安全整数',
    },
    {
      key: 'Number.EPSILON',
      name: '最小差值',
      desc: '表示两个可表示的数字之间的最小差值',
    },
    {
      key: 'Number.MAX_SAFE_INTEGER',
      name: '最大安全整数',
      desc: 'JavaScript中可以安全表示的最大整数',
    },
    {
      key: 'Number.MIN_SAFE_INTEGER',
      name: '最小安全整数',
      desc: 'JavaScript中可以安全表示的最小整数',
    },
    {
      key: 'Number.parseFloat()',
      name: '解析浮点数',
      desc: '将字符串解析为浮点数',
    },
    { key: 'Number.parseInt()', name: '解析整数', desc: '将 字符串解析为整数' },
    {
      key: 'Number.toString()',
      name: '转换为字符串',
      desc: '将数字转换为字符串',
    },
    {
      key: 'Number.toFixed()',
      name: '定点表示',
      desc: '    将数字转换为定点表示的字符串',
    },
    {
      key: 'Number.toExponential()',
      name: '指数表示',
      desc: '  将数字转换为指数表示的字符串',
    },
    {
      key: 'Number.toPrecision()',
      name: '精度表示',
      desc: '将数字转换为指定精度的字符串',
    },
    { key: 'Number.valueOf()', name: '值获取', desc: '返回数字的原始值' },
    { key: 'Number.isInteger()', name: '是否整数', desc: '判断值是否为整数' },
    {
      key: 'Number.isSafeInteger()',
      name: '是否安全整数',
      desc: '判断值是否为安全整数',
    },
    {
      key: 'Number.parseFloat()',
      name: '解析浮点数',
      desc: '将字符串解析为浮点数',
    },
    { key: 'Number.parseInt()', name: '解析整数', desc: '将字符串解析为整数' },
    {
      key: 'Number.toString()',
      name: '转换为字符串',
      desc: '将数字转换为字符串',
    },
    {
      key: 'Number.toFixed()',
      name: '定点表示',
      desc: '将数字转换为定点表示的字符串',
    },
    {
      key: 'Number.toExponential()',
      name: '指数表示',
      desc: '将数字转换为指数表示的字符串',
    },
    {
      key: 'Number.toPrecision()',
      name: '精度表示',
      desc: '将数字转换为指定精度的字符串',
    },
    { key: 'Number.valueOf()', name: '值获取', desc: '返回数字的原始值' },

    { key: 'RegExp', name: '正则表达式对象', desc: '用于匹配字符串模式的对象' },
    {
      key: 'new RegExp()',
      name: '创建正则表达式',
      desc: '创建一个新的正则表达式实例',
    },
    {
      key: '/abc/',
      name: '字面量正则表达式',
      desc: '使用斜杠定义的正则表达式',
    },
    {
      key: 'RegExp.test()',
      name: '测试匹配',
      desc: '测试字符串是否匹配正则表达式',
    },
    {
      key: 'RegExp.exec()',
      name: '执行匹配',
      desc: '在字符串中执行正则表达式匹配',
    },
    {
      key: 'RegExp.toString()',
      name: '转换为字符串',
      desc: '将正则表达式转换为字符串',
    },
    { key: 'RegExp.source', name: '正则源', desc: '返回正则表达式的源字符串' },
    {
      key: 'RegExp.flags',
      name: '正则标志',
      desc: '返回正则表达式的标志字符串',
    },
    {
      key: 'RegExp.lastIndex',
      name: '最后索引',
      desc: '获取或设置正则表达式的最后匹配位置',
    },
    {
      key: 'RegExp.compile()',
      name: '编译正则表达式',
      desc: '重新编译正则表达式',
    },
    {
      key: 'RegExp.test()',
      name: '测试匹配',
      desc: '测试字符串是否匹配正则表达式',
    },
    {
      key: 'RegExp.exec()',
      name: '执行匹配',
      desc: '在字符串中执行正则表达式匹配',
    },
    {
      key: 'RegExp.toString()',
      name: '转换为字符串',
      desc: '将正则表达式转换为字符串',
    },
    { key: 'RegExp.source', name: '正则源', desc: '返回正则表达式的源字符串' },
    {
      key: 'RegExp.flags',
      name: '正则标志',
      desc: '返回正则表达式的标志字符串',
    },
    {
      key: 'RegExp.lastIndex',
      name: '最后索引',
      desc: '获取或设置正则表达式的最后匹配位置',
    },
    {
      key: 'RegExp.compile()',
      name: '编译正则表达式',
      desc: '重新编译正则表达式',
    },
    { key: 'Set', name: '集合对象', desc: '用于存储唯一值的集合' },
    { key: 'new Set()', name: '创建集合', desc: '创建一个新的集合实例' },
    { key: 'Set.add()', name: '添加元素', desc: '向集合中添加一个新元素' },
    { key: 'Set.delete()', name: '删除元素', desc: '从集合中删除指定元素' },
    { key: 'Set.has()', name: '检查元素', desc: '检查集合是否包含指定元素' },
    { key: 'Set.clear()', name: '清空集合', desc: '清除集合中的所有元素' },
    { key: 'Set.size', name: '集合大小', desc: '返回集合中元素的数量' },
    {
      key: 'Set.values()',
      name: '值迭代器',
      desc: '返回一个迭代器，遍历集合中的值',
    },
    {
      key: 'Set.entries()',
      name: '条目迭代器',
      desc: '返回一个迭代器，遍历集合中的条目（值）',
    },
    { key: 'Set.forEach()', name: '遍历集合', desc: '对每个集合元素执行函数' },

    { key: 'Map', name: '映射对象', desc: '用于存储键值对的映射' },
    { key: 'new Map()', name: '创建映射', desc: '创建一个新的映射实例' },
    { key: 'Map.set()', name: '设置键值对', desc: '向映射中添加或更新键值对' },
    { key: 'Map.get()', name: '获取值', desc: '根据键获取映射中的值' },
    { key: 'Map.has()', name: '检查键', desc: '检查映射是否包含指定键' },
    {
      key: 'Map.delete()',
      name: '删除键值对',
      desc: '从映射中删除指定键及其对应的值',
    },
    { key: 'Map.clear()', name: '清空映射', desc: '清除映射中的所有键值对' },
    { key: 'Map.size', name: '映射大小', desc: '返回映射中键值对的数量' },
    {
      key: 'Map.keys()',
      name: '键迭代器',
      desc: '返回一个迭代器，遍历映射中的键',
    },
    {
      key: 'Map.values()',
      name: '值迭代器',
      desc: '返回一个迭代器，遍历映射中的值',
    },
    {
      key: 'Map.entries()',
      name: '条目迭代器',
      desc: '返回一个迭代器，遍历映射中的键值对',
    },
    { key: 'Map.forEach()', name: '遍历映射', desc: '对每个映射条目执行函数' },
    {
      key: 'WeakMap',
      name: '弱映射对象',
      desc: '   用于存储键为对象的键值对，且不会阻止垃圾回收',
    },
    {
      key: 'new WeakMap()',
      name: '创建弱映射',
      desc: '创建一个新的弱映射实例',
    },
    {
      key: 'WeakMap.set()',
      name: '设置键值对',
      desc: '向弱映射中添加或更新键值对',
    },
    { key: 'WeakMap.get()', name: '获取值', desc: '根据键获取弱映射中的值' },
    { key: 'WeakMap.has()', name: '检查键', desc: '检查弱映射是否包含指定键' },
    {
      key: 'WeakMap.delete()',
      name: '删除键值对',
      desc: '从弱映射中删除指定键及其对应的值',
    },
    {
      key: 'WeakMap.clear()',
      name: '清空弱映射',
      desc: '清除弱映射中的所有键值对（不支持）',
    },
    {
      key: 'WeakMap.keys()',
      name: '键迭代器',
      desc: '返回一个迭代器，遍历弱映射中的键（不支持）',
    },
    {
      key: 'WeakMap.values()',
      name: '值迭代器',
      desc: '返回一个迭代器，遍历弱映射中的值（不支持）',
    },
    {
      key: 'WeakMap.entries()',
      name: '条目迭代器',
      desc: '返回一个迭代器，遍历弱映射中的键值对（不支持）',
    },
    {
      key: 'WeakSet',
      name: '弱集合对象',
      desc: '用于存储唯一对象的集合，且不会阻止垃圾回收',
    },
    {
      key: 'new WeakSet()',
      name: '创建弱集合',
      desc: '创建一个新的弱集合实例',
    },
    {
      key: 'WeakSet.add()',
      name: '添加元素',
      desc: '向弱集合中添加一个新对象',
    },
    {
      key: 'WeakSet.delete()',
      name: '删除元素',
      desc: '从弱集合中删除指定对象',
    },
    {
      key: 'WeakSet.has()',
      name: '检查元素',
      desc: '检查弱集合是否包含指定对象',
    },
    {
      key: 'WeakSet.clear()',
      name: '清空弱集合',
      desc: '清除弱集合中的所有对象（不支持）',
    },
    {
      key: 'WeakSet.values()',
      name: '值迭代器',
      desc: '返回一个迭代器，遍历弱集合中的值（不支持）',
    },
    {
      key: 'WeakSet.forEach()',
      name: '遍历弱集合',
      desc: '对每个弱集合元素执行函数（不支持）',
    },
    { key: 'Intl', name: '国际化对象', desc: '用于处理国际化和本地化的API' },
    {
      key: 'Intl.DateTimeFormat',
      name: '日期时间格式化',
      desc: '用于格式化日期和时间',
    },
    { key: 'Intl.NumberFormat', name: '数字格式化', desc: '用于格式化数字' },
    {
      key: 'Intl.Collator',
      name: '字符串比较器',
      desc: '用于比较字符串的排序顺序',
    },
    { key: 'Intl.ListFormat', name: '列表格式化', desc: '用于格式化列表' },
    {
      key: 'Intl.RelativeTimeFormat',
      name: '相对时间格式化',
      desc: '用于格式化相对时间',
    },
    {
      key: 'Intl.PluralRules',
      name: '复数规则',
      desc: '用于处理语言的复数形式',
    },

    {
      key: 'ArrayBuffer',
      name: '数组缓冲区对象',
      desc: '表示通用的、固定长度的二进制数据缓冲区',
    },
    {
      key: 'new ArrayBuffer()',
      name: '创建数组缓冲区',
      desc: '创建一个新的数组缓冲区实例',
    },
    {
      key: 'ArrayBuffer.byteLength',
      name: '字节长度',
      desc: '返回数组缓冲区的字节长度',
    },
    {
      key: 'ArrayBuffer.slice()',
      name: '切片',
      desc: '返回数组缓冲区的指定部分的新视图',
    },

    {
      key: 'DataView',
      name: '数据视图对象',
      desc: '用于在数组缓冲区上读写多种数据类型',
    },
    {
      key: 'new DataView()',
      name: '创建数据视图',
      desc: '创建一个新的数据视图实例',
    },
    {
      key: 'DataView.getInt8()',
      name: '获取8位整数',
      desc: '从指定偏移量获取8位整数',
    },
    {
      key: 'DataView.getUint8()',
      name: '获取无符号8位整数',
      desc: '从指定偏移量获取无符号8位整数',
    },
    {
      key: 'DataView.getInt16()',
      name: '获取16位整数',
      desc: '从指定偏移量获取16位整数',
    },
    {
      key: 'DataView.getUint16()',
      name: '获取无符号16位整数',
      desc: '从指定偏移量获取无符号16位整数',
    },
    {
      key: 'DataView.getInt32()',
      name: '获取32位整数',
      desc: '从指定偏移量获取32位整数',
    },
    {
      key: 'DataView.getUint32()',
      name: '获取无符号32位整数',
      desc: '从指定偏移量获取无符号32位整数',
    },
    {
      key: 'DataView.getFloat32()',
      name: '获取32位浮点数',
      desc: '从指定偏移量获取32位浮点数',
    },
    {
      key: 'DataView.getFloat64()',
      name: '获取64位浮点 数',
      desc: '从指定偏移量获取64位浮点数',
    },
    {
      key: 'DataView.setInt8()',
      name: '设置8位整数',
      desc: '在指定偏移量设置8位整数',
    },
    {
      key: 'DataView.setUint8()',
      name: '设置无符号8    位整数',
      desc: '在指定偏移量设置无符号8位整数',
    },
    {
      key: 'DataView.setInt16()',
      name: '设置16位整数',
      desc: '在指定偏移量设置16位整数',
    },
    {
      key: 'DataView.setUint16()',
      name: '设置无符号16位整数',
      desc: '在指定偏移量设置无符号16位整数',
    },
    {
      key: 'DataView.setInt32()',
      name: '设置32位整数',
      desc: '在指定偏移量设置32位整数',
    },
    {
      key: 'DataView.setUint32()',
      name: '设置无符号32位整数',
      desc: '在指定偏移量设置无符号32位整数',
    },
    {
      key: 'DataView.setFloat32()',
      name: '设置32位浮点     数',
      desc: '在指定偏移量设置32位浮点数',
    },
    {
      key: 'DataView.setFloat64()',
      name: '设置64位浮点 数',
      desc: '在指定偏移量设置64位浮点数',
    },
    {
      key: 'DataView.buffer',
      name: '缓冲区',
      desc: '返回数据视图关联的数组缓冲区',
    },
    {
      key: 'DataView.byteLength',
      name: '字节长度',
      desc: '返回数据视图的字节长度',
    },
    {
      key: 'DataView.byteOffset',
      name: '字节偏移',
      desc: '返回数据视图的字节偏移量',
    },
    {
      key: 'DataView.getBigInt64()',
      name: '获取64位大整数',
      desc: '从指定偏移量获取64位大整数',
    },
    {
      key: 'DataView.getBigUint64()',
      name: '获取无符号 64位大整数',
      desc: '从指定偏移量获取无符号64位大整数',
    },
    {
      key: 'DataView.setBigInt64()',
      name: '设置64位大整数',
      desc: '在指定偏移量设置64位大整数',
    },
    {
      key: 'DataView.setBigUint64()',
      name: '设置无符号 64位大整数',
      desc: '在指定偏移量设置无符号64位大整数',
    },
    {
      key: 'TextEncoder',
      name: '文本编码器',
      desc: '用于将字符串编码为字节序列',
    },
    {
      key: 'new TextEncoder()',
      name: '创建文本编码器',
      desc: '创建一个新的文本编码器实例',
    },
    {
      key: 'TextEncoder.encode()',
      name: '编码字符串',
      desc: '将字符串编码为Uint8Array',
    },
    {
      key: 'TextDecoder',
      name: '文本解码器',
      desc: '用于将字节序列解码为字符串',
    },
    {
      key: 'new TextDecoder()',
      name: '创建文本解码器',
      desc: '创建一个新的文本解码器实例',
    },
    {
      key: 'TextDecoder.decode()',
      name: '解码字节序列',
      desc: '将Uint8Array解码为字符串',
    },

    { key: 'URL', name: 'URL对象', desc: '用于处理和解析URL的对象' },
    { key: 'new URL()', name: '创建URL', desc: '创建一个新的URL实例' },
    { key: 'URL.href', name: '完整URL', desc: '返回URL的完整字符串表示' },
    {
      key: 'URL.protocol',
      name: '协议',
      desc: '返回URL的协议部分（如http、https）',
    },
    { key: 'URL.host', name: '主机名和端口', desc: '返回URL的主机名和端口' },
    { key: 'URL.hostname', name: '主机名', desc: '返回URL的主机名' },
    { key: 'URL.port', name: '端口', desc: '返回URL的端口号' },
    { key: 'URL.pathname', name: '路径名', desc: '返回URL的路径部分' },
    {
      key: 'URL.search',
      name: '查询字符串',
      desc: '返回URL的查询部分（包括问号）',
    },
    { key: 'URL.hash', name: '哈希值', desc: '返回URL的哈希部分（包括井号）' },
    {
      key: 'URL.searchParams',
      name: '查询参数对象',
      desc: '提供对查询参数的访问和操作',
    },
    {
      key: 'URL.toString()',
      name: '转换为字符串',
      desc: '将URL对象转换为字符串',
    },
    {
      key: 'URL.toJSON()',
      name: '转换为JSON',
      desc: '将URL对象转换为JSON字符串',
    },
    {
      key: 'URL.origin',
      name: '源',
      desc: '返回URL的源部分（协议、主机名和端口）',
    },

    {
      key: 'WebSocket',
      name: 'WebSocket对象',
      desc: '用于在客户端和服务器之间建立双向通信的API',
    },
    {
      key: 'new WebSocket()',
      name: '创建WebSocket',
      desc: '创建一个新的WebSocket连接',
    },
    {
      key: 'WebSocket.send()',
      name: '发送消息',
      desc: '向WebSocket服务器发送消息',
    },
    { key: 'WebSocket.close()', name: '关闭连接', desc: '关闭WebSocket连接' },
    {
      key: 'WebSocket.onopen',
      name: '连接打开事件',
      desc: '当WebSocket连接成功打开时触发的事件处理函数',
    },
    {
      key: 'WebSocket.onmessage',
      name: '接收消息事件',
      desc: '当接收到消息时触发的事件处理函数',
    },
    {
      key: 'WebSocket.onerror',
      name: '错误事件',
      desc: '当发生错误时触发的事件处理函数',
    },
    {
      key: 'WebSocket.onclose',
      name: '连接关闭事件',
      desc: '当WebSocket连接关闭时触发的事件处理函数',
    },

    {
      key: 'Worker',
      name: 'Worker对象',
      desc: '用于创建多线程的JavaScript工作者线程',
    },
    { key: 'new Worker()', name: '创建Worker', desc: '创建一个新的Worker线程' },
    {
      key: 'Worker.postMessage()',
      name: '发送消息到Worker',
      desc: '向Worker线程发送消息',
    },
    { key: 'Worker.terminate()', name: '终止Worker', desc: '终止Worker线程' },
    {
      key: 'Worker.onmessage',
      name: '接收消息事件',
      desc: '当Worker线程发送消息时触发的事件处理函数',
    },
    {
      key: 'Worker.onerror',
      name: '错误事件',
      desc: '当Worker线程发生错误时触发的事件处理函数',
    },
    {
      key: 'SharedWorker',
      name: '共享Worker对象',
      desc: '用于在多个浏览器窗口或标签页之间共享Worker线程',
    },
    {
      key: 'new SharedWorker()',
      name: '创建共享Worker',
      desc: '    创建一个新的共享Worker线程',
    },
    {
      key: 'SharedWorker.port',
      name: '共享端口',
      desc: '获取共享Worker的端口对象',
    },
    {
      key: 'SharedWorker.port.postMessage()',
      name: '发送消息到共享Worker   ',
      desc: '向共享Worker线程发送消息',
    },
    {
      key: 'SharedWorker.port.onmessage',
      name: '接收消息事件',
      desc: '当共享Worker线程发送消息时触发的事件处理函数',
    },
    {
      key: 'SharedWorker.port.onerror',
      name: '错误事件',
      desc: '   当共享Worker线程发生错误时触发的事件处理函数',
    },
    {
      key: 'BroadcastChannel',
      name: '广播频道对象',
      desc: '用于在多个浏览器上下文之间进行消息广播',
    },
    {
      key: 'new BroadcastChannel()',
      name: '创建广播频道',
      desc: '创建一个新的广播频道实例',
    },
    {
      key: 'BroadcastChannel.postMessage()',
      name: '发送消息到频道',
      desc: '向广播频道发送消息',
    },
    {
      key: 'BroadcastChannel.onmessage',
      name: '接收消息事件',
      desc: '当接收到频道消息时触发的事件处理函数',
    },
    {
      key: 'BroadcastChannel.close()',
      name: '关闭频道',
      desc: '关闭    广播频道',
    },
    {
      key: 'BroadcastChannel.name',
      name: '频道名称',
      desc: '返回广播频道的名称',
    },
    {
      key: 'BroadcastChannel.onmessageerror',
      name: '消息错误事件',
      desc: '当接收消息时发生错误时触发的事件处理函数',
    },
    {
      key: 'Performance',
      name: '性能对象',
      desc: '用于测量和分析网页性能的API',
    },
    {
      key: 'Performance.now()',
      name: '高精度时间戳',
      desc: '返回自页面加载以来的高精度时间戳（毫秒）',
    },
    {
      key: 'Performance.mark()',
      name: '标记性能点',
      desc: '在性能测量中添加标记',
    },
    {
      key: 'Performance.measure()',
      name: '测量性能',
      desc: '在两个标记之间测量性能',
    },
    {
      key: 'Performance.getEntries()',
      name: '获取性能条目',
      desc: '获取所有性能条目的数组',
    },
    {
      key: 'Performance.getEntriesByName()',
      name: '按名称获取条目',
      desc: '根据名称获取性能条目',
    },
    {
      key: 'Performance.getEntriesByType()',
      name: '按类型获取条目',
      desc: '根据类型获取性能条目',
    },
    {
      key: 'Performance.clearMarks()',
      name: '清除标记',
      desc: '清除所有性能标记',
    },
    {
      key: 'Performance.clearMeasures()',
      name: '清除测量',
      desc: '清除所有性能测量',
    },

    {
      key: 'URLSearchParams',
      name: 'URL查询参数对象',
      desc: '用于处理URL查询参数的API',
    },
    {
      key: 'new URLSearchParams()',
      name: '创建查询参数对象',
      desc: '创建一个新的URL查询参数实例',
    },
    {
      key: 'URLSearchParams.append()',
      name: '添加参数',
      desc: '向查询参数添加新参数',
    },
    {
      key: 'URLSearchParams.delete()',
      name: '删除参数',
      desc: '从查询参数中删除指定参数',
    },
    {
      key: 'URLSearchParams.get()',
      name: '获取参数值',
      desc: '根据参数名获取查询参数的值',
    },
    {
      key: 'URLSearchParams.has()',
      name: '检查参数存在性',
      desc: '检查查询参数是否包含指定参数',
    },
    {
      key: 'URLSearchParams.set()',
      name: '设置参数值',
      desc: '设置查询参数的值，如果参数已存在则更新',
    },
    {
      key: 'URLSearchParams.toString()',
      name: '转换为字符串',
      desc: '将查询参数转换为URL编码的字符串',
    },
    {
      key: 'URLSearchParams.sort()',
      name: '排序参数',
      desc: '对查询参数进行排序',
    },
    {
      key: 'URLSearchParams.entries()',
      name: '参数条目迭代器',
      desc: '返回一个迭代器，遍历查询参数的键值对',
    },
    {
      key: 'URLSearchParams.keys()',
      name: '参数键迭代器',
      desc: '返回一个迭代器，遍历查询参数的键',
    },
    {
      key: 'URLSearchParams.values()',
      name: '参数值迭代器',
      desc: '返回一个迭代器，遍历查询参数的值',
    },
    {
      key: 'URLSearchParams.forEach()',
      name: '遍历查询参数',
      desc: '对每个查询参数执行函数',
    },
    {
      key: 'URLSearchParams.toJSON()',
      name: '转换为JSON',
      desc: '将查询参数对象转换为JSON字符串',
    },
    {
      key: 'URLSearchParams.getAll()',
      name: '获取所有参数值',
      desc: '获取查询参数中指定参数的所有值',
    },
    {
      key: 'URLSearchParams.hasAll()',
      name: '检查所有参数存在性',
      desc: '检查查询参数是否包含指定参数的所有值',
    },
    {
      key: 'URLSearchParams.toObject()',
      name: '转换为对象',
      desc: '将查询参数转换为普通对象',
    },
    {
      key: 'URLSearchParams.fromObject()',
      name: '从对象创建查询参数',
      desc: '从普通对象创建查询参数实例',
    },
    {
      key: 'URLSearchParams.toString()',
      name: '转换为字符串',
      desc: '将查询参数转换为URL编码的字符串',
    },
    {
      key: 'URLSearchParams.toJSON()',
      name: '转换为JSON',
      desc: '将查询参数对象转换为JSON字符串',
    },
    {
      key: 'URLSearchParams.getAll()',
      name: '获取所有参数值',
      desc: '获取查询参数中指定参数的所有值',
    },
    {
      key: 'URLSearchParams.hasAll()',
      name: '检查所有参数存在性',
      desc: '检查查询参数是否包含指定参数的所有值',
    },
    {
      key: 'URLSearchParams.toObject()',
      name: '转换为对象',
      desc: '将查询参数转换为普通对象',
    },
    {
      key: 'Proxy',
      name: '代理',
      desc: '用于创建一个对象的代理',
    },
    {
      key: 'new Proxy()',
      name: '创建代理',
      desc: '创建一个新的代理实例',
    },
    {
      key: 'Proxy.revocable()',
      name: '可撤销代理',
      desc: '创建一个可撤销的代理实例',
    },
    {
      key: 'Proxy.apply()',
      name: '应用函数',
      desc: '拦截函数调用操作',
    },
    {
      key: 'Proxy.construct()',
      name: '构造函数调用',
      desc: '拦截构造函数调用操作',
    },
    {
      key: 'Proxy.get()',
      name: '获取属性值',
      desc: '拦截属性读取操作',
    },
    {
      key: 'Proxy.set()',
      name: '设置属性值',
      desc: '拦截属性写入操作',
    },
    {
      key: 'Proxy.has()',
      name: '检查属性存在性',
      desc: '拦截属性存在性检查操作',
    },
    {
      key: 'Proxy.deleteProperty()',
      name: '删除属性',
      desc: '拦截属性删除操作',
    },
    {
      key: 'Proxy.getOwnPropertyDescriptor()',
      name: '获取自身属性描述符',
      desc: '拦截获取自身属性描述符操作',
    },
    {
      key: 'Proxy.defineProperty()',
      name: '定义属性描述符',
      desc: '拦截定义属性描述符操作',
    },
    {
      key: 'Proxy.getPrototypeOf()',
      name: '获取原型对象',
      desc: '拦截获取原型对象操作',
    },
    {
      key: 'Proxy.setPrototypeOf()',
      name: '设置原型对象',
      desc: '拦截设置原型对象操作',
    },
    {
      key: 'Reflect',
      name: '反射对象',
      desc: '提供拦截JavaScript操作的方法',
    },
    {
      key: 'Reflect.apply()',
      name: '应用函数',
      desc: '调用一个函数并传入指定的this和参数',
    },
    {
      key: 'Reflect.construct()',
      name: '构造函数调用',
      desc: '使用构造函数创建一个新对象',
    },
    {
      key: 'Reflect.get()',
      name: '获取属性值',
      desc: '获取对象的属性值',
    },
    {
      key: 'Reflect.set()',
      name: '设置属性值',
      desc: '设置对象的属性值',
    },
    {
      key: 'Reflect.has()',
      name: '检查属性存在性',
      desc: '检查对象是否具有指定属性',
    },
    {
      key: 'Reflect.deleteProperty()',
      name: '删除属性',
      desc: '删除对象的指定属性',
    },
    {
      key: 'Reflect.getOwnPropertyDescriptor()',
      name: '获取自身属性描述符',
      desc: '获取对象自身属性的描述符',
    },
    {
      key: 'Reflect.defineProperty()',
      name: '定义属性描述符',
      desc: '定义或修改对象的属性描述符',
    },
    {
      key: 'Reflect.getPrototypeOf()',
      name: '获取原型对象',
      desc: '获取对象的原型对象',
    },
    {
      key: 'Reflect.setPrototypeOf()',
      name: '设置原型对象',
      desc: '设置对象的原型对象',
    },
    {
      key: 'for await ... of',
      name: '异步迭代',
      desc: '用于异步迭代可迭代对象',
    },
    {
      key: '(?<name>...)',
      name: '命名捕获组',
      desc: '正则表达式中的命名捕获组',
    },
    {
      key: '(...)(?=...)',
      name: '正向预查',
      desc: '正则表达式中的正向预查，用于匹配后面跟着特定模式的内容',
    },
    {
      key: '(...)(?<!...)',
      name: '负向预查',
      desc: '正则表达式中的负向预查，用于匹配前面不跟着特定模式的内容',
    },
    {
      key: 'BigInt',
      name: '大整数',
      desc: '用于表示任意精度的整数',
    },
    {
      key: 'BigInt()',
      name: '创建大整数',
      desc: '将字符串或数字转换为大整数',
    },
    {
      key: 'BigInt.asIntN()',
      name: '转换为指定位数的大整数',
      desc: '将大整数转换为指定位数的二进制补码形式',
    },
    {
      key: 'BigInt.asUintN()',
      name: '转换为指定位数的无符号大整数',
      desc: '将大整数转换为指定位数的无符号二进制补码形式',
    },
    {
      key: '(?<=...)',
      name: '正向后顾',
      desc: '正则表达式中的正向后顾，用于匹配前面跟着特定模式的内容',
    },
    {
      key: '(?<!...)',
      name: '负向后顾',
      desc: '正则表达式中的负向后顾，用于匹配前面不跟着特定模式的内容',
    },
    {
      key: 'WeakRef',
      name: '弱引用对象',
      desc: '用于创建对对象的弱引用，不阻止垃圾回收',
    },
    {
      key: 'new WeakRef()',
      name: '创建弱引用',
      desc: '创建一个新的弱引用实例',
    },
    {
      key: 'WeakRef.deref()',
      name: '获取弱引用的值',
      desc: '获取弱引用指向的对象，如果对象已被垃圾回收则返回undefined',
    },
    {
      key: 'Object.fromEntries()',
      name: '从条目创建对象',
      desc: '将键值对列表转换为对象',
    },
    {
      key: 'String.trimStart()',
      name: '去除字符串开头的空白',
      desc: '返回一个新字符串，去除原字符串开头的空白字符',
    },
    {
      key: 'String.trimEnd()',
      name: '去除字符串结尾的空白',
      desc: '返回一个新字符串，去除原字符串结尾的空白字符',
    },
    {
      key: 'String.replaceAll()',
      name: '替换所有匹配项',
      desc: '返回一个新字符串，替换原字符串中所有匹配的子字符串',
    },
    {
      key: 'String.at()',
      name: '获取指定位置的字符',
      desc: '返回字符串中指定位置的字符',
    },
    {
      key: 'Promise.allSettled()',
      name: '所有Promise的结果',
      desc: '返回一个Promise，包含所有输入Promise的结果（成功或失败）',
    },
    {
      key: 'Obj?.prop / Obj?.[key] / Obj?.method()',
      name: '可选链',
      desc: '安全地访问嵌套对象的属性',
    },
    {
      key: '??(a ?? b)',
      name: '空值合并运算符',
      desc: '返回第一个非null或undefined的操作数',
    },
    {
      key: '||=',
      name: '逻辑或赋值运算符',
      desc: '如果左侧操作数为假值，则将右侧操作数赋值给左侧操作数',
    },
    {
      key: '&&=',
      name: '逻辑与赋值运算符',
      desc: '如果左侧操作数为真值，则将右侧操作数赋值给左侧操作数',
    },
    {
      key: '??=',
      name: '空值合并赋值运算符',
      desc: '如果左侧操作数为null或undefined，则将右侧操作数赋值给左侧操作数',
    },
    {
      key: 'import.meta',
      name: '模块元数据',
      desc: '提供有关当前模块的元数据，如URL等',
    },
    {
      key: 'Object.hasOwn()',
      name: '检查对象自身属性',
      desc: '检查对象是否具有指定的自身属性',
    },
    {
      key: 'Array.findLast()',
      name: '查找最后一个元素',
      desc: '返回数组中满足条件的最后一个元素',
    },
    {
      key: 'Array.findLastIndex()',
      name: '查找最后一个元素的索引',
      desc: '返回数组中满足条件的最后一个元素的索引',
    },
    {
      key: 'Array.prototype.toReversed()',
      name: '反转数组',
      desc: '返回一个新数组，包含原数组的元素，但顺序颠倒;不改变原数组',
    },
    {
      key: 'Array.prototype.toSorted()',
      name: '排序数组',
      desc: '返回一个新数组，包含原数组的元素，但已排序;不改变原数组',
    },
    {
      key: 'Array.prototype.toSpliced()',
      name: '切片数组',
      desc: '返回一个新数组，包含原数组的元素，但已切片;不改变原数组',
    },
    {
      key: 'Array.prototype.with()',
      name: '替换数组元素',
      desc: '返回一个新数组，替换指定索引处的元素;不改变原数组',
    },
    {
      key: 'Object.hasOwnProperty()',
      name: '检查对象自身属性（旧）',
      desc: '检查对象是否具有指定的自身属性（旧方法）',
    },
    {
      key: 'Promise.withResolvers()',
      name: '创建带解析器的Promise',
      desc: '创建一个Promise，并返回一个包含resolve和reject方法的对象 返回 { promise, resolve, reject }）',
    },
    {
      key: 'localStorage',
      name: '本地存储',
      desc: '用于在浏览器中存储数据的API，数据在浏览器关闭后仍然存在',
    },
    {
      key: 'sessionStorage',
      name: '会话存储',
      desc: '用于在浏览器会话中存储数据的API，数据在浏览器关闭后消失',
    },
    {
      key: 'indexedDB',
      name: '索引数据库',
      desc: '用于在浏览器中存储大量结构化数据的API，支持事务和索引',
    },
    {
      key: 'CacheStorage',
      name: '缓存存储',
      desc: '用于在浏览器中存储请求和响应的缓存API',
    },
    {
      key: 'ServiceWorker',
      name: '服务工作线程',
      desc: '用于在后台运行脚本以处理网络请求和缓存的API',
    },
    {
      key: 'localStorage.setItem()',
      name: '设置本地存储项',
      desc: '在本地存储中设置一个键值对',
    },
    {
      key: 'localStorage.getItem()',
      name: '获取本地存储项',
      desc: '在本地存储中获取指定键的值',
    },
    {
      key: 'localStorage.removeItem()',
      name: '删除本地存储项',
      desc: '在本地存储中删除指定键的值',
    },
    {
      key: 'localStorage.clear()',
      name: '清空本地存储',
      desc: '清空本地存储中的所有键值对',
    },
    {
      key: 'sessionStorage.setItem()',
      name: '设置会话存储项',
      desc: '在会话存储中设置一个键值对',
    },
    {
      key: 'sessionStorage.getItem()',
      name: '获取会话存储项',
      desc: '在会话存储中获取指定键的值',
    },
    {
      key: 'sessionStorage.removeItem()',
      name: '删除会话存储项',
      desc: '在会话存储中删除指定键的值',
    },
    {
      key: 'sessionStorage.clear()',
      name: '清空会话存储',
      desc: '清空会话存储中的所有键值对',
    },
    {
      key: 'indexedDB.open()',
      name: '打开索引数据库',
      desc: '打开或创建一个索引数据库实例',
    },
    {
      key: 'indexedDB.deleteDatabase()',
      name: '删除索引数据库',
      desc: '删除指定的索引数据库实例',
    },
    {
      key: 'indexedDB.transaction()',
      name: '创建索引数据库事务',
      desc: '创建一个新的事务以对索引数据库进行读写操作',
    },
    {
      key: 'indexedDB.objectStore()',
      name: '获取索引数据库对象存储',
      desc: '获取指定名称的对象存储',
    },
  ],
};

export default javascriptWords;
